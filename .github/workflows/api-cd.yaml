name: API CD

on:
  workflow_call:
    inputs:
      repo_tag:
        description: Repo tag to deploy
        type: string
        default: main
  workflow_dispatch:
    inputs:
      repo_tag:
        description: Repo tag to deploy
        type: string
        default: main

jobs:
  deploy_via_ssh:
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    environment: prod
    permissions:
      id-token: write
      contents: read
    env:
      API_DIR: apps/api

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.repo_tag }}

      - name: Update repository
        run: git pull

      - name: Get image tag
        id: get-image-tag
        uses: ./.github/actions/get-tag
        with:
          path: ${{ env.API_DIR }}

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/product-ci-cd
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      - name: Setup Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file
        working-directory: ${{ env.API_DIR }}
        env:
          DOCKER_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.get-image-tag.outputs.tag }}
        run: |
          echo "Generating .env file"
          echo "# Autogenerated .env file" > .env

          echo "environment=production" >> .env
          echo "SERVER_PORT=${{ vars.SERVER_PORT }}" >> .env
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> .env

          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN='${{ vars.JWT_EXPIRES_IN }}'" >> .env

          echo "MAILER_HOST=${{ secrets.MAILER_HOST }}" >> .env
          echo "MAILER_PORT=${{ secrets.MAILER_PORT }}" >> .env
          echo "MAILER_USER=${{ secrets.MAILER_USER }}" >> .env
          echo "MAILER_PASSWORD=${{ secrets.MAILER_PASSWORD }}" >> .env

          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

      # Copy docker-compose and .env files to target server
      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.DOMAIN }}
          username: ${{ secrets.SSH_USER }}
          port: 22
          key: ${{ secrets.SSH_KEY }}
          source: "./${{ env.API_DIR }}/docker-compose.yaml,./${{ env.API_DIR }}/.env"
          target: "~/.deploy/${{ github.event.repository.name }}"

      - name: Replace AWS Region hyphens
        run: |
          AWS_ECR_REGION=$(echo ${{ secrets.AWS_ECR_REGION }} | sed 's/-/_/g')
          echo "AWS_ECR_REGION=$AWS_ECR_REGION" >> $GITHUB_ENV

      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v0.1.5
        env:
          ECR_USERNAME: ${{ steps.login-ecr.outputs[format('docker_username_{0}_dkr_ecr_{1}_amazonaws_com', secrets.AWS_ACCOUNT_ID, env.AWS_ECR_REGION)] }}
          ECR_PASSWORD: ${{ steps.login-ecr.outputs[format('docker_password_{0}_dkr_ecr_{1}_amazonaws_com', secrets.AWS_ACCOUNT_ID, env.AWS_ECR_REGION)] }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          host: ${{ secrets.DOMAIN }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          envs: ECR_USERNAME,ECR_PASSWORD,ECR_REGISTRY
          script: |
            echo $ECR_PASSWORD | docker login -u $ECR_USERNAME --password-stdin $ECR_REGISTRY
            cd ~/.deploy/${{ github.event.repository.name }}/${{ env.API_DIR }}
            docker compose pull
            docker compose down
            docker compose up -d
            docker system prune -f
            docker logout $ECR_REGISTRY
