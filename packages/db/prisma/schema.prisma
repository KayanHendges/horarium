// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../dist/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  email String @unique

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  membership Membership?
  accounts   Account[]
  tokens     Token[]

  @@map("users")
}

enum AccountProvider {
  PASSWORD
  GOOGLE
}

model Account {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  provider          AccountProvider
  providerAccountId String?         @unique @map("provider_account_id")
  passwordHash      String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.ObjectId

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("accounts")
}

model Workspace {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  membership Membership?
  role       Role[]

  @@map("workspaces")
}

model Membership {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String    @unique @map("user_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  workspaceId String    @unique @map("workspace_id") @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        Role      @default(member)

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("memberships")
}

enum Role {
  owner
  admin
  member
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  code      String
  type      TokenType
  active    Boolean   @default(true)
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.ObjectId

  @@map("tokens")
}
